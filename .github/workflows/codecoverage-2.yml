# This is a basic workflow to help you get started with Actions

name: Code Coverage2

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1
      
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1
      
      - name: Install dotcover
        run: choco install dotcover-cli -y
      
      - name: Restore all nuget packages for the solution
        run: nuget restore SampleApp.sln
      
      - name: Build SampleApp solution
        run: msbuild SampleApp.sln
     
      - name: Run coverage
        run: | 
              $files=Get-ChildItem .\GitHubE -recurse -force -filter "*.Test.dll" | Get-Unique
              
              $testlist="";
              foreach ($file in $files)
              { 
                $testlist+=$file.FullName + " ";
              }
              $testlist="SampleApp.Test\bin\Debug\SampleApp.Test.dll";
              $dotcoverExe=Get-ChildItem dotcover -recurse -force -filter "dotcover.exe" | Get-Unique
              $vstestExe=Get-Command vstest.console.exe | Select -expandproperty Source
              Start-Process "dotcover.exe" -ArgumentList "cover /TargetExecutable=`"$vstestExe`" /TargetArguments=$testlist /TargetWorkingDir=$PWD /Output=`"coverage.xml`" /ReportType=`"XML`"" -NoNewWindow -Wait

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@4.8.1
        with:
           reports: 'coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
           targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
           reporttypes: 'Badges' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
           title: 'SampleApp Code Coverage' 
    
      - name: Download CodeCoverage Report
        uses: actions/upload-artifact@v2
        with:
           name: coverage
           path: coverage.xml 
      
      
      - name: ReportGenerator in HTML
        uses: danielpalme/ReportGenerator-GitHub-Action@4.8.1
        with:
           reports: 'coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
           targetdir: 'coveragereportHTML' # REQUIRED # The directory where the generated report should be saved.
           reporttypes: 'HTML' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
           title: 'SampleApp Code Coverage' 
      
      - name: Download CodeCoverage Report using ReportGenerator
        uses: actions/upload-artifact@v2
        with:
           name: coveragereport
           path: coveragereportHTML   
